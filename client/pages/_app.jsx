import axios from 'axios'
import Head from 'next/head'
import { useRouter } from 'next/router'
import React, { useEffect, useState } from 'react'
import Header from '../components/Header'
import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  const router = useRouter()
  const [isLoading, setLoading] = useState(false)
  const [render, setRender] = useState(false)
  const privateRoutes = ['/dashboard', '/profile', 'cart', '/settings']
  const authRoutes = ['/signin', '/signup']

  const routeCondition =
    authRoutes.includes(router.pathname) || privateRoutes.includes(router.pathname)

  useEffect(() => checkRoute(), [])

  function checkRoute() {
    if (!routeCondition) return setRender(true)

    if (routeCondition) {
      setRender(false)
      checkAuth()
    }
  }

  async function checkAuth() {
    try {
      setLoading(true)
      const user = await axios.get('/api/auth').then(res => res.data.user)
      const authenticated = user && authRoutes.includes(router.pathname)
      const notAuthenticated = !user && privateRoutes.includes(router.pathname)

      if (authenticated) {
        router.back()
      }

      if (!user && authRoutes.includes(router.pathname)) setRender(true)

      if (notAuthenticated) {
        router.replace('/signin').then(() => setRender(true))
      }
      if (user && privateRoutes.includes(router.pathname)) {
        setRender(true)
      }

      if (user && !routeCondition) setRender(true)
    } catch (err) {
      console.error(err)
    } finally {
      setLoading(false)
    }
  }

  if (isLoading) return <div style={{ fontSize: '3rem', textAlign: 'center' }}>Loading...</div>

  return (
    <React.Fragment>
      <Head>
        <meta charset='utf-8' />
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header />
      {!isLoading && render && <Component {...pageProps} />}
    </React.Fragment>
  )
}

export default MyApp
